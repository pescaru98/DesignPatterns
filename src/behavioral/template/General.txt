Introduction
[Autogenerated] Hi, This is Brian Hansen and then this module, where you're going to look at the template method designed pattern. The template method pattern is used to define an algorithm that allows sub classes to redefine parts of the algorithm without changing its structure. Let's look at the concepts as to why you would choose this pattern.

Concepts
[Autogenerated] the concept surrounding why you would choose the template method pattern or that it is a fantastic technique for code reuse. The use of this technique is common in designing frameworks and libraries. The template method pattern has been around long before inversion of control frameworks, but IOC containers use this to allow plug double components inside their frame works all the time. IOC frameworks really helped keep this pattern mainstream. In my opinion, the real focus of this pattern is surrounding the algorithm of what we're trying to solve. The template method enables us to force an algorithm, but allows pieces to be configured by the user. Examples of this in the Java a p I r. The job you till collections sort method. If you watch the module on the strategy pattern, you will notice that this is Theseus. Aim example. The difference here is that the strategy allowed us to swap out the entire comparator, where the template method has is focusing on the method to override with sorting. Another example is tthe e index of method in the abstract list class. Let's look at the design considerations when selecting this pattern. Now

Design Considerations
[Autogenerated] The design of the template method is based around an abstract base class. The base class is responsible for calling wth e child class and not the other way around hooks air put into place, which may be overridden. Operations, though, are also put in place and must be overridden. The pieces of the UML diagram are an abstract based class and a concrete class. Let's look at that UML diagram now.

Pitfalls
[Autogenerated] what are some of the pitfalls of a template method. You need to make sure that you restrict access to certain methods correctly. Also, it is important to implement hooks and operations correctly as well. The template method can create a confusing class hierarchy, typically in an object oriented structure. We don't interact with an algorithm across multiple classes. Usually objects contain the entire a unit of work, where with the Temple of Method, it is purposefully divided across multiple classes. And overall, depending on how many templates you make, it can make for a difficult program flow. I do like this pattern, though, and the template method makes for a great use of implementing an algorithm. Let's compare it with different patterns to see more of its particular benefits and which situations you should use it in.

Contrast to Other Patterns
[Autogenerated] to contrast, the template meant that pattern. Let's compare it with this strategy. Both patterns are focused on the algorithm. The template method is focused on the same algorithm, but with different implementations. Though it is always class based, the template extends the base class and concrete implementations just implement pieces or hooks in the algorithm. The temple method is also chosen at compile time. The strategy, on the other hand, implements the entire algorithm per strategy. The strategy is also Maura about the contract or the interface. Another major difference is that this strategy has always used when you need to pick the algorithm at runtime he intended. This pattern is to allow the client to select while using the application where, with the template method, we've defined that beforehand and are aware of what we want to use at compile time.

Summary
[Autogenerated] Let's quickly recap what we learned about the template method. It guarantees algorithm adherents. It's commonly used in IOC containers and is often referred as thehunt Leawood. Principle. Don't call us, we'll call you. It's a easier implementation, then the strategy. As far as how we're going to interact with this algorithm, there's typically just a method that we hook into and just have to build out that simple piece of the algorithm. The next pattern that we're going to look at is the visitor pattern, and that is the last one of the behavioral patterns.
